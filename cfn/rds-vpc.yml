AWSTemplateFormatVersion: 2010-09-09
Description: "Deploys a PostgreSQL RDS instance and read replica inside a VPC."
Parameters:
  AppName:
    Type: String
    Default: "aws-permits-pipeline-vpc"
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/24"
    AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
  DBMasterSubnetCIDR:
    Description: IP range (CIDR notation) for the subnet in the RDS Master Availability Zone
    Type: String
    Default: "10.0.0.0/28"
    AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
  DBReplicaSubnetCIDR:
    Description: IP range (CIDR notation) for the subnet in the RDS Master Availability Zone
    Type: String
    Default: "10.0.0.16/28"
    AllowedPattern: "((\\d{1,3})\\.){3}\\d{1,3}/\\d{1,2}"
  DBInstanceIdentifier:
    Type: String
    Default: "db"
  DBEngine:
    Type: String
    Default: "postgres"
  DBEngineVersion:
    Type: String
    Default: "11.6"
  DBInstanceClass:
    Type: String
    Default: "db.t2.micro"
  DBStorageType:
    Type: String
    Default: "gp2"
  DBAllocatedStorage:
    Type: Number
    Default: 20
  DBName:
    Type: String
    Default: '{{resolve:ssm:/permits/db_name:1}}'
  DBUser:
    Type: String
    Default: '{{resolve:ssm:/permits/db_user:1}}'
  DBPassword:
    Type: String
    Default: '{{resolve:ssm-secure:/permits/db_password:1}}'
    NoEcho: True
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: App
          Value: !Ref AppName
  DBMasterSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref DBMasterSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: App
          Value: !Ref AppName
        - Key: Name
          Value: Master Subnet (AZ1)
  DBReplicaSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref DBReplicaSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: App
          Value: !Ref AppName
        - Key: Name
          Value: Replica Subnet (AZ2)
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: App
          Value: !Ref AppName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: !Ref AppName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  DBMasterSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DBMasterSubnet
      RouteTableId: !Ref PublicRouteTable
  DBReplicaSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref DBReplicaSubnet
  VpcDefaultSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      CidrIp: 0.0.0.0/0
      FromPort: 5432
      ToPort: 5432
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup for RDS instances
      SubnetIds:
        - !Ref DBMasterSubnet
        - !Ref DBReplicaSubnet
  RDSS3ImportPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - !Ref Stage
          - !Ref AppName
          - rds-s3-import-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Sid: s3import
            Action: 
              - s3:GetObject
              - s3:ListBucket
            Effect: Allow
            Resource: 
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DataBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DataBucket
                  - '/*'
      Roles: 
        - !Ref RDSS3ImportRole
  RDSS3ImportRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref Stage
          - !Ref AppName
          - rds-s3-import-role
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - rds.amazonaws.com
            Action: sts:AssumeRole
  RDSMasterInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: InternetGatewayAttachment
    Properties:
      DBInstanceIdentifier: !Join 
        - '-'
        - - !Ref Stage
          - !Ref AppName
          - !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      AssociatedRoles: 
        - FeatureName: s3Import
          RoleArn: !GetAtt RDSS3ImportRole.Arn
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      StorageType: !Ref DBStorageType
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup      
      Tags:
        - Key: App
          Value: !Ref AppName
        - Key: Name
          Value: Postgres Master DB
  RDSReadReplicaInstance:
    Properties:
      DBInstanceIdentifier: !Join 
        - '-'
        - - !Ref Stage
          - !Ref AppName
          - 'replica'
          - !Ref DBInstanceIdentifier
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      SourceDBInstanceIdentifier: !Ref RDSMasterInstance
      SourceRegion: !Ref AWS::Region
      Tags:
        - Key: App
          Value: !Ref AppName
        - Key: Name
          Value: Postgres Read Replica DB
    Type: AWS::RDS::DBInstance
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join 
        - '-'
        - - !Ref Stage
          - !Ref AppName
          - 'data'
          - !Ref AWS::Region
          - !Ref AWS::AccountId
Outputs:
  MasterEndpointDB:
    Description: "Endpoint of the newly created Building Permits RDS master instance"
    Value: !GetAtt RDSMasterInstance.Endpoint.Address
  MasterPortDB:
    Description: "Port of the newly created Building Permits RDS master instance"
    Value: !GetAtt RDSMasterInstance.Endpoint.Port
  ReplicaEndpointDB:
    Description: "Endpoint of the newly created Building Permits RDS read replica instance"
    Value: !GetAtt RDSReadReplicaInstance.Endpoint.Address
  ReplicaPortDB:
    Description: "Port of the newly created Building Permits RDS read replica instance"
    Value: !GetAtt RDSReadReplicaInstance.Endpoint.Port
  DataBucket:
    Description: "S3 Bucket for storing Building Permits data"
    Value: !Ref DataBucket
  AppName:
    Description: "App name"
    Value: !Ref AppName